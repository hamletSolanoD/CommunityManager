generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMINISTRADOR
  NORMAL
  COORDINADOR
}

enum AtlasLabelType {
  ATLAS_SESION_COMPLETED_LABEL
  ATLAS_SESION_DRAFT_COMPLETED_LABEL
  ATLAS_IDEA_LABEL
  ATLAS_SESION_LABEL
  ATLAS_PROJECT_LABEL
  ATLAS_ARTICLE_LABEL
  ATLAS_CONCEPT_LABEL
}

enum SessionStatus {
  COMPLETED
  PENDING
  ON_WORK
}

enum ParticipantRole {
  ADMIN
  GUEST
}

enum ResourceType {
  EXTERNAL_LINK
  INTERNAL_ATLAS_ENTRY
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  type          UserType  @default(NORMAL)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]

  courseEnrollments   UserCourseEnrollment[]
  atlasEntries        UserAtlasEntry[]
  sessionParticipants UserSessionParticipant[]
  
  createdAtlasEntries AtlasEntry[] @relation("AtlasEntryCreator")
  
  // Cursos administrados
  administeredCourses Course[] @relation("CourseAdministrator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AtlasLabel {
  id          String          @id @default(cuid())
  title       String
  description String?
  type        AtlasLabelType
  tabPermissions Json // Array de permisos de tabs
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relación many-to-many con entradas de atlas
  atlasEntries AtlasEntryLabel[]

  @@map("atlas_labels")
}

model AtlasEntry {
  id          String   @id @default(cuid())
  title       String
  content     Json     // Contenido variable según tipo de entrada
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Creador de la entrada
  creatorId   String
  creator     User     @relation("AtlasEntryCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  // Relaciones many-to-many
  labels      AtlasEntryLabel[]
  users       UserAtlasEntry[]
  
  // Relación one-to-one con course session (solo para AtlasSesionLabel)
  courseSession CourseSession?
  
  // Referencias a otras entradas de atlas
  referencedEntries AtlasEntryReference[] @relation("SourceEntry")
  referencingEntries AtlasEntryReference[] @relation("TargetEntry")

  @@map("atlas_entries")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean  @default(true)  // true = público, false = privado
  accessCode  String?  // código para cursos privados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Administradores del curso
  administrators User[] @relation("CourseAdministrator")
  
  // Relaciones many-to-many
  enrollments UserCourseEnrollment[]
  sessions    CourseSession[]

  @@map("courses")
}

model CourseSession {
  id               String   @id @default(cuid())
  registrationCode String?  // Código para registrar asistencia
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relación one-to-one con atlas entry
  atlasEntryId String      @unique
  atlasEntry   AtlasEntry  @relation(fields: [atlasEntryId], references: [id], onDelete: Cascade)
  
  // Relación con curso
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // Participantes de la sesión
  participants UserSessionParticipant[]

  @@map("course_sessions")
}

// Tabla intermedia para User - Course (many-to-many)
model UserCourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("user_course_enrollments")
}

// Tabla intermedia para User - AtlasEntry (many-to-many)
model UserAtlasEntry {
  id           String @id @default(cuid())
  userId       String
  atlasEntryId String
  role         ParticipantRole @default(GUEST)
  createdAt    DateTime @default(now())
  
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  atlasEntry AtlasEntry @relation(fields: [atlasEntryId], references: [id], onDelete: Cascade)
  
  @@unique([userId, atlasEntryId])
  @@map("user_atlas_entries")
}

// Tabla intermedia para User - CourseSession con metadata extra
model UserSessionParticipant {
  id              String        @id @default(cuid())
  userId          String
  sessionId       String
  status          SessionStatus @default(PENDING)
  attendedAt      DateTime?     // Timestamp cuando registró asistencia
  hasRegistrationCode Boolean   @default(false) // Si usó código de registro
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  session CourseSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, sessionId])
  @@map("user_session_participants")
}

// Tabla intermedia para AtlasEntry - AtlasLabel (many-to-many)
model AtlasEntryLabel {
  id           String @id @default(cuid())
  atlasEntryId String
  atlasLabelId String
  createdAt    DateTime @default(now())
  
  atlasEntry AtlasEntry  @relation(fields: [atlasEntryId], references: [id], onDelete: Cascade)
  atlasLabel AtlasLabel  @relation(fields: [atlasLabelId], references: [id], onDelete: Cascade)
  
  @@unique([atlasEntryId, atlasLabelId])
  @@map("atlas_entry_labels")
}

// Tabla para referencias entre entradas de atlas
model AtlasEntryReference {
  id             String @id @default(cuid())
  sourceEntryId  String
  targetEntryId  String
  resourceType   ResourceType
  createdAt      DateTime @default(now())
  
  sourceEntry AtlasEntry @relation("SourceEntry", fields: [sourceEntryId], references: [id], onDelete: Cascade)
  targetEntry AtlasEntry @relation("TargetEntry", fields: [targetEntryId], references: [id], onDelete: Cascade)
  
  @@unique([sourceEntryId, targetEntryId])
  @@map("atlas_entry_references")
}